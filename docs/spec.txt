# プロジェクトの概要　GoNote
GoNoteはgo言語で書かれたシンプルなノートアプリである。
MPA（マルチページアプリケーション）として実装されている。

# 機能要件
- 画面
    - ホーム("/")
        - タイトルを表示する
        - ノート一覧に遷移
    - ノート一覧("/notes")
        - ノートのタイトルを表示する
        - ノートの内容を表示する
        - ノートのタイトルをクリックするとノートの詳細画面に遷移
    - ノート詳細("/notes/:id")
        - ノートのタイトルを表示する
        - ノートの内容を表示する
        - 編集ボタンでノートの編集画面に遷移
        - 削除ボタンでノートを削除する
        - 戻るボタンでノート一覧に遷移
    - ノート編集("/notes/:id/edit")
        - ノートのタイトルを表示する
        - ノートの内容を表示する
        - 保存ボタンでノートを保存する
        - 戻るボタンでノート詳細に遷移
    - ノート新規作成("/notes/new")
        - ノートのタイトルを表示する
        - ノートの内容を表示する
        - 保存ボタンでノートを保存する
        - 戻るボタンでノート一覧に遷移

# 非機能要件
- テンプレートにはhtml/templateを使用する
- フロントエンドにはBootstrapを使用する
- バックエンドにはGo言語を使用する
- データベースにはPostgreSQLを使用する


#　アプリケーションアーキテクチャ
- Controller
    - ルーティング
    - アプリケーションのフローだけを知っていて難しいことは知らない
    - 永続化処理をRepositoryに委譲
    - ビジネスロジックをServiceに委譲
    - Viewを返す
- Repository
    - 永続化処理
    - 永続化されたデータを取り出す
    - アプリケーションの都合は考慮しない
- Domain
    - ビジネスロジックだけを考慮する(認証など)
    - 永続化処理はRepositoryに委譲

# 開発方針
Test-Driven Development（TDD）を採用する。
- テストファースト
    - まずテストを書く
    - その後、実装を行う
    - テストが通るまで実装を続ける
    - テストでモジュールの仕様を決める
- リファクタリング
    - テストが通ることを確認したら、リファクタリングを行う
    - リファクタリング後もテストが通ることを確認する

# テスト方針
- テストを書く目的
    - モジュールの振る舞いをAIに伝えてドキュメント化する
    - 開発の進捗と道しるべを示す

- テストをしたい項目
    - 暗号化・複合化などの複雑な処理
    - DBの永続化処理・クエリの検証

- テストしなくて良い項目
    - ルーティング
    - フロントエンドの処理
    - DBの接続処理
    - テンプレートの処理

